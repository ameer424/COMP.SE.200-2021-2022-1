{
  "stats": {
    "suites": 10,
    "tests": 39,
    "passes": 36,
    "pending": 0,
    "failures": 3,
    "start": "2021-12-05T17:39:39.277Z",
    "end": "2021-12-05T17:39:39.350Z",
    "duration": 73,
    "testsRegistered": 39,
    "passPercent": 92.3076923076923,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "0bca5a12-1df5-42cd-b60f-83ef1ad18c3b",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "9eabe079-251f-484d-a7d6-2a8bb82d35bd",
          "title": "Add function",
          "fullFile": "C:\\Users\\ameer\\Documents\\GitHub\\COMP.SE.200-2021-2022-1\\test\\test.add.js",
          "file": "\\test\\test.add.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "add(2, 3) should be equal to 5",
              "fullTitle": "Add function add(2, 3) should be equal to 5",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.equal(add(2, 3), 5);",
              "err": {},
              "uuid": "33134806-bfed-4c7b-a6cc-32a5abff1c85",
              "parentUUID": "9eabe079-251f-484d-a7d6-2a8bb82d35bd",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "add(0, 1) should be equal to 1",
              "fullTitle": "Add function add(0, 1) should be equal to 1",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.equal(add(0, 1), 1);",
              "err": {},
              "uuid": "aed31ed9-e0dc-42b1-9b0a-4af04a04a2f1",
              "parentUUID": "9eabe079-251f-484d-a7d6-2a8bb82d35bd",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "add(4, -1) should be equal to 3",
              "fullTitle": "Add function add(4, -1) should be equal to 3",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.equal(add(4, -1), 3);",
              "err": {},
              "uuid": "268a70ce-0bb8-4d33-9e2b-f8a07961d506",
              "parentUUID": "9eabe079-251f-484d-a7d6-2a8bb82d35bd",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "add(-3, -7) should equal to -10",
              "fullTitle": "Add function add(-3, -7) should equal to -10",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.equal(add(-3, -7), -10);",
              "err": {},
              "uuid": "46ef3050-77b2-4a38-aef6-633968a35de2",
              "parentUUID": "9eabe079-251f-484d-a7d6-2a8bb82d35bd",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "add(-10, 0) should be equal to -10",
              "fullTitle": "Add function add(-10, 0) should be equal to -10",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.equal(add(-10, 0), -10);",
              "err": {},
              "uuid": "656d2676-78ee-439f-89cf-26d3d8df4720",
              "parentUUID": "9eabe079-251f-484d-a7d6-2a8bb82d35bd",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "add(40000000, 60000000) should not crash",
              "fullTitle": "Add function add(40000000, 60000000) should not crash",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.equal(add(40000000, 60000000), 100000000);",
              "err": {},
              "uuid": "9de611d9-8850-46c7-bf36-a03fb6c805ac",
              "parentUUID": "9eabe079-251f-484d-a7d6-2a8bb82d35bd",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "33134806-bfed-4c7b-a6cc-32a5abff1c85",
            "aed31ed9-e0dc-42b1-9b0a-4af04a04a2f1",
            "268a70ce-0bb8-4d33-9e2b-f8a07961d506",
            "46ef3050-77b2-4a38-aef6-633968a35de2",
            "656d2676-78ee-439f-89cf-26d3d8df4720",
            "9de611d9-8850-46c7-bf36-a03fb6c805ac"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 2,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "8cb67f59-4b9c-4954-803d-f9217bf08d29",
          "title": "Difference function",
          "fullFile": "C:\\Users\\ameer\\Documents\\GitHub\\COMP.SE.200-2021-2022-1\\test\\test.difference.js",
          "file": "\\test\\test.difference.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "difference([2, 1], [2, 3]) should be equal to [ 1 ]",
              "fullTitle": "Difference function difference([2, 1], [2, 3]) should be equal to [ 1 ]",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.isArray(difference([2, 1], [2, 3]));\nassert.sameMembers(difference([2, 1], [2, 3]), [1]);",
              "err": {},
              "uuid": "95d12ea2-e1e2-4c10-b07b-4a450489a4e9",
              "parentUUID": "8cb67f59-4b9c-4954-803d-f9217bf08d29",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "difference([ ], [ ]) should be equal to [ ]",
              "fullTitle": "Difference function difference([ ], [ ]) should be equal to [ ]",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.isArray(difference([], []));\nassert.sameMembers(difference([], []), []);",
              "err": {},
              "uuid": "d8f937cb-0cd6-4a04-80e1-aca42d67a0de",
              "parentUUID": "8cb67f59-4b9c-4954-803d-f9217bf08d29",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "difference([1, 2, 3, 3, 3], [3]) should be equal to [1, 2]",
              "fullTitle": "Difference function difference([1, 2, 3, 3, 3], [3]) should be equal to [1, 2]",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.isArray(difference([1, 2, 3, 3, 3], [3]));\nassert.sameMembers(difference([1, 2, 3, 3, 3], [3]), [1, 2]);",
              "err": {},
              "uuid": "c230daed-a8d4-408d-818c-ec2c06261cf1",
              "parentUUID": "8cb67f59-4b9c-4954-803d-f9217bf08d29",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "difference([ ], [5, 1, 2]) should be equal to [ ]",
              "fullTitle": "Difference function difference([ ], [5, 1, 2]) should be equal to [ ]",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.isArray(difference([], [5, 1, 2]));\nassert.sameMembers(difference([], [5, 1, 2]), []);",
              "err": {},
              "uuid": "050b7b08-0ac9-4c29-88bf-ace59c08ff46",
              "parentUUID": "8cb67f59-4b9c-4954-803d-f9217bf08d29",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "difference([5, 1, 2], [ ]) should be equal to [5, 1, 2]",
              "fullTitle": "Difference function difference([5, 1, 2], [ ]) should be equal to [5, 1, 2]",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.isArray(difference([5, 1, 2], [ ]));\nassert.sameMembers(difference([5, 1, 2], [ ]), [5, 1, 2]);",
              "err": {},
              "uuid": "66cfa825-2540-4c44-ad9a-c3a968e43386",
              "parentUUID": "8cb67f59-4b9c-4954-803d-f9217bf08d29",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "95d12ea2-e1e2-4c10-b07b-4a450489a4e9",
            "d8f937cb-0cd6-4a04-80e1-aca42d67a0de",
            "c230daed-a8d4-408d-818c-ec2c06261cf1",
            "050b7b08-0ac9-4c29-88bf-ace59c08ff46",
            "66cfa825-2540-4c44-ad9a-c3a968e43386"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 4,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "ace06b23-8862-4c3e-8aae-a93f1a84e1ff",
          "title": "Divide function",
          "fullFile": "C:\\Users\\ameer\\Documents\\GitHub\\COMP.SE.200-2021-2022-1\\test\\test.divide.js",
          "file": "\\test\\test.divide.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "divide(6, 4) should be equal to 1.5",
              "fullTitle": "Divide function divide(6, 4) should be equal to 1.5",
              "timedOut": false,
              "duration": 2,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "assert.equal(divide(6, 4), 1.5);",
              "err": {
                "message": "AssertionError: expected 1 to equal 1.5",
                "estack": "AssertionError: expected 1 to equal 1.5\n    at Context.<anonymous> (file:///C:/Users/ameer/Documents/GitHub/COMP.SE.200-2021-2022-1/test/test.divide.js:7:16)\n    at processImmediate (internal/timers.js:462:21)",
                "diff": "- 1\n+ 1.5\n"
              },
              "uuid": "1fe43ff3-e82b-4bc4-b0b8-7b08390f81cb",
              "parentUUID": "ace06b23-8862-4c3e-8aae-a93f1a84e1ff",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "divide(4, 0) should be equal to NAN",
              "fullTitle": "Divide function divide(4, 0) should be equal to NAN",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.isNaN(divide(4, 0));",
              "err": {},
              "uuid": "79ede837-a8b5-4e9f-bbe0-ad33d76cf78e",
              "parentUUID": "ace06b23-8862-4c3e-8aae-a93f1a84e1ff",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "divide(2, 4) should be equal to 0.5",
              "fullTitle": "Divide function divide(2, 4) should be equal to 0.5",
              "timedOut": false,
              "duration": 0,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "assert.equal(divide(2, 4), 0.5);",
              "err": {
                "message": "AssertionError: expected 1 to equal 0.5",
                "estack": "AssertionError: expected 1 to equal 0.5\n    at Context.<anonymous> (file:///C:/Users/ameer/Documents/GitHub/COMP.SE.200-2021-2022-1/test/test.divide.js:13:16)\n    at processImmediate (internal/timers.js:462:21)",
                "diff": "- 1\n+ 0.5\n"
              },
              "uuid": "8770caee-dc05-40fc-9ef9-4297401eaf3e",
              "parentUUID": "ace06b23-8862-4c3e-8aae-a93f1a84e1ff",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "79ede837-a8b5-4e9f-bbe0-ad33d76cf78e"
          ],
          "failures": [
            "1fe43ff3-e82b-4bc4-b0b8-7b08390f81cb",
            "8770caee-dc05-40fc-9ef9-4297401eaf3e"
          ],
          "pending": [],
          "skipped": [],
          "duration": 2,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "75737c47-dfe2-451f-a095-d3397392622e",
          "title": "Equality function",
          "fullFile": "C:\\Users\\ameer\\Documents\\GitHub\\COMP.SE.200-2021-2022-1\\test\\test.eq.js",
          "file": "\\test\\test.eq.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "eq(object, object) should be true",
              "fullTitle": "Equality function eq(object, object) should be true",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.isTrue(eq(object, object));",
              "err": {},
              "uuid": "5a85ce95-a178-4e57-9df3-b9799308acaf",
              "parentUUID": "75737c47-dfe2-451f-a095-d3397392622e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "eq(object, other) should be false",
              "fullTitle": "Equality function eq(object, other) should be false",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.isFalse(eq(object, other));",
              "err": {},
              "uuid": "b0a9ddc5-b19f-48b9-ab1b-f181931212ec",
              "parentUUID": "75737c47-dfe2-451f-a095-d3397392622e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "rq('a', 'a') should be true",
              "fullTitle": "Equality function rq('a', 'a') should be true",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.isTrue(eq('a', 'a'));",
              "err": {},
              "uuid": "d30c9c11-6035-476a-9c06-c4ed0a2ea810",
              "parentUUID": "75737c47-dfe2-451f-a095-d3397392622e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "eq('a', Object('a')) should be false",
              "fullTitle": "Equality function eq('a', Object('a')) should be false",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.isFalse(eq('a'), Object('a'));",
              "err": {},
              "uuid": "5a890725-9a58-429b-b485-67a206e28a14",
              "parentUUID": "75737c47-dfe2-451f-a095-d3397392622e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "eq(NaN, NaN) should be true",
              "fullTitle": "Equality function eq(NaN, NaN) should be true",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.isTrue(eq(NaN, NaN));",
              "err": {},
              "uuid": "b6b86aec-92d2-45c2-91b8-b530c43d5a20",
              "parentUUID": "75737c47-dfe2-451f-a095-d3397392622e",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "5a85ce95-a178-4e57-9df3-b9799308acaf",
            "b0a9ddc5-b19f-48b9-ab1b-f181931212ec",
            "d30c9c11-6035-476a-9c06-c4ed0a2ea810",
            "5a890725-9a58-429b-b485-67a206e28a14",
            "b6b86aec-92d2-45c2-91b8-b530c43d5a20"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 2,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "a5dc2f90-14bd-43a9-8c50-7247157da292",
          "title": "Reduce function",
          "fullFile": "C:\\Users\\ameer\\Documents\\GitHub\\COMP.SE.200-2021-2022-1\\test\\test.reduce.js",
          "file": "\\test\\test.reduce.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "reduce([1, 2], (sum, n) => sum + n, 0) should be equal to 3",
              "fullTitle": "Reduce function reduce([1, 2], (sum, n) => sum + n, 0) should be equal to 3",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.equal(reduce([1, 2], (sum, n) => sum + n, 0), 3);",
              "err": {},
              "uuid": "7d214a1c-c7dd-42c0-964e-130c51a7d2c0",
              "parentUUID": "a5dc2f90-14bd-43a9-8c50-7247157da292",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "reduce([1, 2, 0], (mul, n) => mul * n, 1) should be equal to 0",
              "fullTitle": "Reduce function reduce([1, 2, 0], (mul, n) => mul * n, 1) should be equal to 0",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.equal(reduce([1, 2, 0], (mul, n) => mul * n, 1), 0);",
              "err": {},
              "uuid": "1f3c9118-2f2a-4485-8079-9b4c7b42fd8d",
              "parentUUID": "a5dc2f90-14bd-43a9-8c50-7247157da292",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "7d214a1c-c7dd-42c0-964e-130c51a7d2c0",
            "1f3c9118-2f2a-4485-8079-9b4c7b42fd8d"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 2,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "b9fc495c-99d2-4e31-becf-d5dac9635d36",
          "title": "Slice function",
          "fullFile": "C:\\Users\\ameer\\Documents\\GitHub\\COMP.SE.200-2021-2022-1\\test\\test.slice.js",
          "file": "\\test\\test.slice.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "slice([1, 2, 3, 4], 2) should be equal to [3, 4]",
              "fullTitle": "Slice function slice([1, 2, 3, 4], 2) should be equal to [3, 4]",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.sameMembers(slice([1, 2, 3, 4], 2), [3, 4]);",
              "err": {},
              "uuid": "5f45a6ec-ee4a-43ee-9f4d-7e0afdcb0079",
              "parentUUID": "b9fc495c-99d2-4e31-becf-d5dac9635d36",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "slice([], 2, 4) should be equal to []",
              "fullTitle": "Slice function slice([], 2, 4) should be equal to []",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.sameMembers(slice([], 2, 4), []);",
              "err": {},
              "uuid": "9e1903f1-d729-4017-bfb7-e9bf148cc1c3",
              "parentUUID": "b9fc495c-99d2-4e31-becf-d5dac9635d36",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "slice([1, 2, 3, 4], 2, 3) should be equal to [3]",
              "fullTitle": "Slice function slice([1, 2, 3, 4], 2, 3) should be equal to [3]",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.sameMembers(slice([1, 2, 3, 4], 2, 3), [3]);",
              "err": {},
              "uuid": "f1d5edff-32f5-491f-86cf-bccef4b076b5",
              "parentUUID": "b9fc495c-99d2-4e31-becf-d5dac9635d36",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "5f45a6ec-ee4a-43ee-9f4d-7e0afdcb0079",
            "9e1903f1-d729-4017-bfb7-e9bf148cc1c3",
            "f1d5edff-32f5-491f-86cf-bccef4b076b5"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 3,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "291d8b3c-a3b5-4e77-b6bb-100c4318bcb1",
          "title": "ToInteger function",
          "fullFile": "C:\\Users\\ameer\\Documents\\GitHub\\COMP.SE.200-2021-2022-1\\test\\test.toInteger.js",
          "file": "\\test\\test.toInteger.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "toInteger(3.2) should be equal to 3",
              "fullTitle": "ToInteger function toInteger(3.2) should be equal to 3",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.equal(toInteger(3.2), 3);",
              "err": {},
              "uuid": "3ac26498-46e0-4195-9ab6-ef81144f235c",
              "parentUUID": "291d8b3c-a3b5-4e77-b6bb-100c4318bcb1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "toInteger(Number.MIN_VALUE) should be equal to 0",
              "fullTitle": "ToInteger function toInteger(Number.MIN_VALUE) should be equal to 0",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.equal(toInteger(Number.MIN_VALUE), 0);",
              "err": {},
              "uuid": "0c24de43-b07a-4478-92ee-28d409bc25bd",
              "parentUUID": "291d8b3c-a3b5-4e77-b6bb-100c4318bcb1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "toInteger(Infinity) should be equal to 1.7976931348623157e+308",
              "fullTitle": "ToInteger function toInteger(Infinity) should be equal to 1.7976931348623157e+308",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.equal(toInteger(Infinity), 1.7976931348623157e+308);",
              "err": {},
              "uuid": "04ffa862-e3f1-4670-a59f-7ece4512da6b",
              "parentUUID": "291d8b3c-a3b5-4e77-b6bb-100c4318bcb1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "toInteger('3.2') should be equal to 3",
              "fullTitle": "ToInteger function toInteger('3.2') should be equal to 3",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.equal(toInteger('3.2'), 3);",
              "err": {},
              "uuid": "00b590bd-893d-4420-ab7a-c88cb22d699c",
              "parentUUID": "291d8b3c-a3b5-4e77-b6bb-100c4318bcb1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "toInteger('a') should be equal to 0",
              "fullTitle": "ToInteger function toInteger('a') should be equal to 0",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.equal(toInteger('a'), 0);",
              "err": {},
              "uuid": "07144008-3137-4742-8042-ac7ddeb5b762",
              "parentUUID": "291d8b3c-a3b5-4e77-b6bb-100c4318bcb1",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "3ac26498-46e0-4195-9ab6-ef81144f235c",
            "0c24de43-b07a-4478-92ee-28d409bc25bd",
            "04ffa862-e3f1-4670-a59f-7ece4512da6b",
            "00b590bd-893d-4420-ab7a-c88cb22d699c",
            "07144008-3137-4742-8042-ac7ddeb5b762"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 4,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "5210c31e-0a83-423b-9b00-d5a8684eeab0",
          "title": "IsNumber function",
          "fullFile": "C:\\Users\\ameer\\Documents\\GitHub\\COMP.SE.200-2021-2022-1\\test\\test.toNumber.js",
          "file": "\\test\\test.toNumber.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "toNumber(3.2) should be equal to 3.2",
              "fullTitle": "IsNumber function toNumber(3.2) should be equal to 3.2",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.equal(toNumber(3.2), 3.2);",
              "err": {},
              "uuid": "4391bbaf-0fe9-4e5c-bebd-d3449469e050",
              "parentUUID": "5210c31e-0a83-423b-9b00-d5a8684eeab0",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "toNumber(Number.MIN_VALUE) should be equal to 5e-324",
              "fullTitle": "IsNumber function toNumber(Number.MIN_VALUE) should be equal to 5e-324",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.equal(toNumber(Number.MIN_VALUE), 5e-324);",
              "err": {},
              "uuid": "4d2989bb-75f2-4f5b-9456-fc309caed26d",
              "parentUUID": "5210c31e-0a83-423b-9b00-d5a8684eeab0",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "toNumber(Infinity), should be equal to Infinity",
              "fullTitle": "IsNumber function toNumber(Infinity), should be equal to Infinity",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.equal(toNumber(Infinity), Infinity);",
              "err": {},
              "uuid": "a4efbb7c-6572-4538-9b89-0cf2de475199",
              "parentUUID": "5210c31e-0a83-423b-9b00-d5a8684eeab0",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "toNumber(0/0) should be equal to NaN",
              "fullTitle": "IsNumber function toNumber(0/0) should be equal to NaN",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.isNaN(toNumber(0/0));",
              "err": {},
              "uuid": "31541cee-addb-4172-85b1-32ecf97b6a8b",
              "parentUUID": "5210c31e-0a83-423b-9b00-d5a8684eeab0",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "toNumber(4/0) should be equal to Infinity",
              "fullTitle": "IsNumber function toNumber(4/0) should be equal to Infinity",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.equal(toNumber(4/0), Infinity);",
              "err": {},
              "uuid": "00dd4fc2-69c6-49af-92bc-2cc4d71c54fc",
              "parentUUID": "5210c31e-0a83-423b-9b00-d5a8684eeab0",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "4391bbaf-0fe9-4e5c-bebd-d3449469e050",
            "4d2989bb-75f2-4f5b-9456-fc309caed26d",
            "a4efbb7c-6572-4538-9b89-0cf2de475199",
            "31541cee-addb-4172-85b1-32ecf97b6a8b",
            "00dd4fc2-69c6-49af-92bc-2cc4d71c54fc"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 2,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "e0b3e397-830c-45ba-8715-09907f5b52a4",
          "title": "ToString function",
          "fullFile": "C:\\Users\\ameer\\Documents\\GitHub\\COMP.SE.200-2021-2022-1\\test\\test.toString.js",
          "file": "\\test\\test.toString.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "toString(null) should be equal to ''",
              "fullTitle": "ToString function toString(null) should be equal to ''",
              "timedOut": false,
              "duration": 1,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "assert.equal(toString(null), '');",
              "err": {
                "message": "AssertionError: expected 'null' to equal ''",
                "estack": "AssertionError: expected 'null' to equal ''\n    at Context.<anonymous> (file:///C:/Users/ameer/Documents/GitHub/COMP.SE.200-2021-2022-1/test/test.toString.js:7:16)\n    at processImmediate (internal/timers.js:462:21)",
                "diff": "- null\n"
              },
              "uuid": "40741651-fe50-4891-b160-e1d067aa3426",
              "parentUUID": "e0b3e397-830c-45ba-8715-09907f5b52a4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "toString(-0) should be equal to '-0'",
              "fullTitle": "ToString function toString(-0) should be equal to '-0'",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.equal(toString(-0), '-0');",
              "err": {},
              "uuid": "4f829bce-afdd-496c-8a18-4f2718b84c75",
              "parentUUID": "e0b3e397-830c-45ba-8715-09907f5b52a4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "toString([1, 2, 3]) should be equal to '1,2,3'",
              "fullTitle": "ToString function toString([1, 2, 3]) should be equal to '1,2,3'",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.equal(toString([1, 2, 3]), '1,2,3');",
              "err": {},
              "uuid": "31607a21-17cb-4582-b631-79169da922d4",
              "parentUUID": "e0b3e397-830c-45ba-8715-09907f5b52a4",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "4f829bce-afdd-496c-8a18-4f2718b84c75",
            "31607a21-17cb-4582-b631-79169da922d4"
          ],
          "failures": [
            "40741651-fe50-4891-b160-e1d067aa3426"
          ],
          "pending": [],
          "skipped": [],
          "duration": 1,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "e4788a01-5a82-4507-8a1f-ec55e9c7126b",
          "title": "UpperFirst function",
          "fullFile": "C:\\Users\\ameer\\Documents\\GitHub\\COMP.SE.200-2021-2022-1\\test\\test.upperFirst.js",
          "file": "\\test\\test.upperFirst.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "upperFirst('fred') should be equal to 'Fred'",
              "fullTitle": "UpperFirst function upperFirst('fred') should be equal to 'Fred'",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.equal(upperFirst('fred'), 'Fred');",
              "err": {},
              "uuid": "dbc25446-459e-4e79-b2da-06279ff57be8",
              "parentUUID": "e4788a01-5a82-4507-8a1f-ec55e9c7126b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "upperFirst('FRED') should be equal to 'FRED'",
              "fullTitle": "UpperFirst function upperFirst('FRED') should be equal to 'FRED'",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.equal(upperFirst('FRED'), 'FRED');",
              "err": {},
              "uuid": "b64cfd84-e6bb-4c5b-8e1e-eaebc154d1ea",
              "parentUUID": "e4788a01-5a82-4507-8a1f-ec55e9c7126b",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "dbc25446-459e-4e79-b2da-06279ff57be8",
            "b64cfd84-e6bb-4c5b-8e1e-eaebc154d1ea"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 2,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "9.1.3"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.0.1"
    },
    "marge": {
      "options": null,
      "version": "6.0.1"
    }
  }
}